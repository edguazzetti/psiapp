# Generated by Django 4.2.1 on 2023-06-02 14:58

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Administrador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni_administrador', models.IntegerField(unique=True)),
                ('nombre_a', models.CharField(max_length=100)),
                ('apellido_a', models.CharField(max_length=100, null=True)),
                ('email_a', models.CharField(max_length=45, unique=True)),
                ('contrasena_a', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='TiposDeTerapia',
            fields=[
                ('id_t', models.AutoField(primary_key=True, serialize=False)),
                ('nombre_rama', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='Ubicacion',
            fields=[
                ('id_u', models.AutoField(primary_key=True, serialize=False)),
                ('provincia', models.CharField(max_length=45)),
                ('localidad', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='UsuarioPaciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni_paciente', models.IntegerField(unique=True)),
                ('nombre_p', models.CharField(max_length=100)),
                ('apellido_p', models.CharField(max_length=100, null=True)),
                ('email_p', models.CharField(max_length=45, unique=True)),
                ('contrasena_p', models.CharField(max_length=45)),
                ('provincia_p', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tupsiapp.ubicacion')),
            ],
        ),
        migrations.CreateModel(
            name='Profesional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricula_pr', models.IntegerField(unique=True)),
                ('nombre_pr', models.CharField(max_length=100)),
                ('apellido_pr', models.CharField(max_length=100)),
                ('email_pr', models.CharField(max_length=45, null=True)),
                ('contrasena_pr', models.CharField(max_length=8)),
                ('localidad_pr', models.CharField(max_length=45)),
                ('provincia_pr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tupsiapp.ubicacion')),
                ('tipos_de_terapia_pr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tupsiapp.tiposdeterapia')),
            ],
        ),
        migrations.CreateModel(
            name='Planes',
            fields=[
                ('id_plan', models.AutoField(primary_key=True, serialize=False)),
                ('precio_plan', models.IntegerField()),
                ('nombre_plan', models.CharField(max_length=50)),
                ('dni_adm_p', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tupsiapp.administrador')),
            ],
        ),
        migrations.CreateModel(
            name='PagosSuscripciones',
            fields=[
                ('id_pago', models.AutoField(primary_key=True, serialize=False)),
                ('tipo_pago', models.CharField(max_length=20)),
                ('id_plan_p', models.IntegerField()),
                ('fecha_inicio', models.DateField()),
                ('fecha_caducidad', models.DateField()),
                ('dni_pac', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tupsiapp.usuariopaciente')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=120, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
